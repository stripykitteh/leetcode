from typing import List
import operator, logging, sys, random

logging.basicConfig(stream=sys.stderr, level=logging.WARNING)

def d_print(string: str):
    if debug:
        print(string)
    
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:

        nums.sort()
        ln = len(nums)
        logging.debug(nums)

        ret_val = []
        # 3 zeroes
        if operator.countOf(nums, 0) >= 3:
            ret_val.append([0,0,0])

        # 1 zero
        zero = True
        try:
            zero_idx = nums.index(0)
            neg_end = zero_idx-1
            while zero_idx < ln and nums[zero_idx] == 0:
                zero_idx += 1
            pos_start = zero_idx
        except ValueError:
            zero = False
            found = False
            for i in range(ln):
                if nums[i] > 0:
                    neg_end = i-1
                    pos_start = i
                    found = True
                    break
            if not found:
                neg_end = ln-1
                
        if zero:
            left, right = 0, ln-1
            while left < neg_end+1 and pos_start <= right:
                current = nums[left] + nums[right]
                logging.debug("%s,%s,%s",left,right,current)
                if current == 0:
                    ret_val.append([nums[left],0,nums[right]])
                    while True:
                        right -= 1
                        if nums[right] != nums[right+1]:
                            break                        
                    while True:
                        left += 1
                        if nums[left] != nums[left-1]:
                            break                        
                elif current > 0:
                    while True:
                        right -= 1
                        if nums[right] != nums[right+1]:
                            break
                else:
                    while True:
                        left += 1
                        if nums[left] != nums[left-1]:
                            break

        if neg_end == ln-1:
            return ret_val

        # 2-sum, fix negatives
        for i in range(neg_end+1):
            if pos_start > ln-1:
                continue
            left = pos_start
            right = ln-1
            if i > 0 and nums[i] == nums[i-1]:
                continue
            target = nums[i]*-1
            current = nums[left] + nums[right]
            while left < right:
                logging.debug("n,%s,%s,%s,%s,%s",i,left,right,current,target)
                if current < target:
                    left += 1
                elif current > target:
                    right -= 1
                else:
                    if [nums[i],nums[left],nums[right]] not in ret_val:
                        ret_val.append([nums[i],nums[left],nums[right]])
                    left += 1
                    right -= 1
                current = nums[left] + nums[right]
    
        # 2-sum, fix positives
        for i in range(pos_start,ln):
            if neg_end < 0:
                continue
            left = 0
            right = neg_end
            if i > pos_start and nums[i] == nums[i-1]:
                continue
            target = nums[i]*-1
            current = nums[left] + nums[right]
            while left < right:
                logging.debug("p,%s,%s,%s,%s,%s",i,left,right,current,target)
                if current < target:
                    left += 1
                elif current > target:
                    right -= 1
                else:
                    if [nums[left],nums[right],nums[i]] not in ret_val:
                        ret_val.append([nums[left],nums[right],nums[i]])
                    left += 1
                    right -= 1
                current = nums[left] + nums[right]

        return ret_val

    
if __name__ == '__main__':

    nums = [-1,0,1,2,-1,-4]
    print(Solution().threeSum(nums))    
    nums = [0,1,1]
    print(Solution().threeSum(nums))    
    nums = [0,0,0]
    print(Solution().threeSum(nums))    
    nums = [1,1,-2]
    print(Solution().threeSum(nums))    
    nums = [-1,0,1]
    print(Solution().threeSum(nums))    
    nums = [-4,-2,-2,-2,0,1,2,2,2,3,3,4,4,6,6]
    print(Solution().threeSum(nums))    
    nums = [34,55,79,28,46,33,2,48,31,-3,84,71,52,-3,93,15,21,-43,57,-6,86,56,94,74,83,-14,28,-66,46,-49,62,-11,43,65,77,12,47,61,26,1,13,29,55,-82,76,26,15,-29,36,-29,10,-70,69,17,49]
    print(Solution().threeSum(nums))    
    nums = [-2,-3,0,0,-2]    
    print(Solution().threeSum(nums))
    random_list = random.sample(range(-100000,100000),3000)
    print(Solution().threeSum(random_list))    
